const express = require("express");
const User = require("Models\User.js");
const router = express.Router();
const { body, validationResult } = require("express-validator");
const bcrypt = require("bcryptjs");
var jwt = require("jsonwebtoken");
var fetchuser= require('Middleware\fetchuser.js')


const JWT_SECRET = "priiiherebro";
//-------------------------------ROUTE 1-----------------------------

//creating user using: POST "/api/auth/". No login Required
router.post(
  "/createUser",
  [
    body("name", "Enter a valid name").isLength({ min: 3 }), //custom msg for errors is the second parameter
    body("email", "Enter a valid email").isEmail(),
    body("password", "Password must be atleast 5 characters").isLength({
      min: 5,
    }),
  ],
  async (req, res) => {
    //if there are errors return bad request and the errors

    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array });
    }
    //promise that returns user- check whether the user wid this email exists
    try {
      let user = await User.findOne({ email: req.body.email });
      if (user) {
        return res
          .status(400)
          .json({ error: "sorry a user with this email already rxists" });
      }
      const salt = await bcrypt.genSalt(10);
      const secPass = await bcrypt.hash(req.body.password, salt);
      //they return promise hence use await, if not used await the promise won't be resolved and it will move to next line

      //create new user
      user = await User.create({
        name: req.body.name,
        password: secPass, //variable
        email: req.body.email,
      });
      const data = {
        user: {
          id: user.id,
        },
      };
      const authToken = jwt.sign(data, JWT_SECRET);
      /*.then(user=> res.json(user))
    .catch(err=>{console.log(err)
    res.json({error:'PLEASE ENTER A UNIQUE VALUE FOR EMAIL', message: err.message})*/
      res.json({ authToken });
    } catch (error) {
      console.error(error.message);
      res.status(500).send("some error occured");
    }
  }
);
//res.send(req.body)
//err.message displays err msg generated by them.

//------------------------ROUTE 2--------------------------------
//authenticate a user using: POST "/api/auth/login".
router.post(
  "/login",
  [
    body("email", "Enter a valid email").isEmail(),
    body("password", "pwd cannot be blank").exists(),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { email, password } = req.body;
    try {
      let user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ error: "try again" });
      }
      const passwordCompare = await bcrypt.compare(password, user.password);
      if (!passwordCompare) {
        return res
          .status(400)
          .json({ error: "try again with correct credentails" });
      }
      const data = {
        user: {
          id: user.id,
        },
      };
      const authToken = jwt.sign(data, JWT_SECRET);
      res.json(authToken);
    } catch (error) {
      console.error(error.message);
      res.status(500).send("internal server error");
    }
  }
);
//------------------------ROUTE 3--------------------------
// Get logged in User details using: POST "/api/auth/getuser".
//will have take authToken and fetch details
router.post("/getuser", fetchuser, async (req, res) => {

  try {
    userId = req.user.id;
    const user = await User.findById(userId).select("-password");
    res.send(user)
  } catch (error) {
    console.error(error.message);
    res.status(500).send("internal server error");
  }
});

module.exports = router;
